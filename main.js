#!/usr/bin/env node

const crypto = require('crypto');
const readline = require('readline');
const fs = require('fs');
const net = require('net');
const program = require('commander');
const { addColor, print } = require('./colors.js');
const {
    encryptPub,
    decryptPub,
    encryptPriv,
    decryptPriv,
    genRandomBytes,
    generateKeys,
    loadPublicKey,
    loadPrivateKey
} = require('./encrypt.js');

program
    .version('0.1.0')
    .option('-s, --server', 'Run server')
    .option('-c, --client', 'Run client')
    .option('-pp, --passphrase [passphrase]', 'Specify the dir to passphrase')
    .option('-pubk --publickey [publickey]', 'Specify the dir to public key')
    .option('-privk --privatekey [privatekey', 'Specify the dir to private key')
    .option('-ip, --ip [ip]', 'For clients, specify server ip address to connect [ip]')
    .option('-p, --port [port]', 'Specify the port to connect to or listen on', '8000')
    .parse(process.argv);

if(program.server) {
    if(!program.port) {
        throw addColor('Please specify the port to listen on (-p/--port)', 'green');
    }
    const pubKey = loadPublicKey();
    const server = net.createServer((c) => {
        c.on('end', () => {
            console.log(`Client disconnected, ip: ${c.remoteAddress}`);
        });
        c.on('data', (d) => {
            print('\n--------\n');
            print(`Received encrypted data from ${c.ip}\n`, 'green');
            print('Encrypted: ', 'yellow');
            print(`${d}\n`);
            print('Decrypted: ', 'yellow');
            print(`${decryptPub(pubKey, d)}\n`);
            print('--------\n');
            c.write(`${encryptPub(pubKey, Date().toString())}`);
        });

        const randomBytes = genRandomBytes(64).toString('hex');
        print(`Client connected, from ${c.ip}\n`);
        print(`Random string: `, 'green');
        print(`${randomBytes}\n`);
        c.write(`${encryptPub(pubKey, `Hello from server! - ${Date().toString()}`)}\n
                Random string generated by server: ${randomBytes}\n`);
    });
      
    server.listen(parseInt(program.port), () => {
        print(`Server listening on ${program.port}\n`);
    });
} else if(program.client) {
    if(!program.ip) {
        throw addColor('Please specify the ip to connect (-ip/--ip)', 'green');
    }
    if(!program.port) {
        throw addColor('Please specify the port to listen on (-p/--port)', 'green');
    }

    const { privKey, passphrase } = loadPrivateKey();

    const client = new net.Socket();
    client.connect({ port: parseInt(program.port), host: program.ip });
    client.on('data', (d) => {
        // console.log(data.toString('utf-8'));
        print('\n--------\n');
        print(`Received encrypted data from server\n`, 'green');
        print('Encrypted: ', 'yellow');
        print(`${d.toString('hex')}\n`);
        print('Decrypted: ', 'yellow');
        print(`${decryptPriv(privKey, passphrase, d)}\n`);
        print('--------\n');
    });

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    rl.on('line', (input) => {
        const encryptedInput = encryptPriv(privKey, passphrase, input);
        client.write(encryptedInput);
    });
    
    rl.on('close', () => {
        print('Bye!', 'yellow');
    });
} else {
    throw 'Please specify the mode to work on (-c/--client or -s/--server)';
}