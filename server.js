const net = require('net');
const { addColor, print } = require('./colors.js');
const {
    encryptPub,
    decryptPub,
    genRandomBytes,
} = require('./encrypt.js');
const {
    concatData,
    send
} = require('./dataProcess.js');

const getServerEncrypt = (pubKey) => {
    const encrypt = (data) => {
        return encryptPub(pubKey, data)
    };
    return encrypt;
};

const getServerDecrypt = (pubKey) => {
    const decrypt = (data) => {
        return decryptPub(pubKey, data)
    };
    return decrypt;
};

const getServer = (pubKey) => {
    const encrypt = getServerEncrypt(pubKey);
    const decrypt = getServerDecrypt(pubKey);

    const server = net.createServer((c) => {
        // let dataReceivedMap = new Map();

        c.on('end', () => {
            console.log(`Client disconnected, ip: ${c.remoteAddress}`);
        });
        c.on('data', (d) => {
            print('\n--------\n');
            print(`Received encrypted data from ${c.remoteAddress}\n`, 'green');
            print('Encrypted: ', 'yellow');
            print(`${d.toString('hex')}\n`);

            const parsedData = JSON.parse(d);
            const messageType = parsedData.type;

            print('Message Type: ', 'yellow');
            print(`${messageType}\n`);

            print('Message length: ', 'yellow');
            print(`${d.length}\n`);

            let restoredData = '';
            for(let each of parsedData.data) {
                const dataBuf = Buffer.from(each, 'hex');
                restoredData += decrypt(dataBuf).toString();
            }

            print('Data length: ', 'yellow');
            print(`${restoredData.length}\n`);

            if(messageType === 'data') {
                print('Decrypted Data: ', 'yellow');
            } else if(messageType === 'random-bytes') {
                print('Decrypted Random Bytes: ', 'yellow');
            }
            print(`${restoredData}\n`);
            print('--------\n\n');

            const dataReply = `Server has received the data with length ${restoredData.length} - ${addColor(Date().toString(), 'green')}`;
            send(c, encrypt, dataReply);
        });

        // Say hi to client!
        const randomBytes = genRandomBytes(64).toString('hex');
        print(`Client connected, from ${c.remoteAddress}\n`);
        print(`Random string: `, 'green');
        print(`${randomBytes}\n`);
         
        const dataBack = `Hello from server! - ${addColor(Date().toString(), 'green')}`;
        send(c, encrypt, dataBack);
        const randomInfo = `Random string generated by server: ${randomBytes}`;
        send(c, encrypt, randomInfo, type='random-bytes');
    });
    return server;
};

module.exports = {
    getServer
};